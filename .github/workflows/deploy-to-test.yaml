name: Deploy alpha channel to test

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'e.g. v1.20.1-beta.1'


# env:
  # repository: 'Greenstand/treetracker-wallet-admin-client'
env:
  project-directory: ./



jobs:
  prepare:
    name: checking and prepare settings for jobs
    runs-on: ubuntu-latest
    outputs:
      CHANNEL: ${{ steps.resolver.outputs.CHANNEL }}
      S3_BUCKET_SECRET_NAME: ${{ steps.resolver.outputs.S3_BUCKET_SECRET_NAME }}
      CDN_ID_SECRET_NAME: ${{ steps.resolver.outputs.CDN_ID_SECRET_NAME }}
      NO_NEED_TO_BUILD: ${{ steps.resolver.outputs.NO_NEED_TO_BUILD }}

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - uses: actions/checkout@v3
      - run: |
          echo "::debug:: begin preparing...";
          echo "::debug:: branch to release: $GITHUB_REF_NAME"
          node <<EOF >> $GITHUB_OUTPUT
            const ref = process.env.GITHUB_REF_NAME
            const s3BucketSecretNames = {
              "main": "TEST_CDN_S3_BUCKET",
              "beta": "TEST_STAGING_CDN_S3_BUCKET",
              "alpha": "TEST_STAGING_CDN_S3_BUCKET",
            }
            const cdnIdSecretNames = {
              "main": "TEST_CDN_DISTRIBUTION_ID",
              "beta": "TEST_STAGING_CDN_DISTRIBUTION_ID",
              "alpha": "TEST_STAGING_CDN_DISTRIBUTION_ID",
            }
            const releaseJson = require("./.releaserc.json");        
            const branches = releaseJson.branches.map(e => e.name? e.name : e);
            if(branches.indexOf(ref) === -1){
              console.log("NO_NEED_TO_BUILD=true");
              process.exit(0);
            }
            let channel = releaseJson.branches.reduce((a,c) => a || (c === ref && c) || (c.name === ref && c.channel), false);
            let s3BucketSecretName;
            let cdnIdSecretName;
            s3BucketSecretName = s3BucketSecretNames[channel];
            if(!s3BucketSecretName){
              throw '::error:: can not find s3 bucket secret name by, channel:' + channel ;
            }
            cdnIdSecretName = cdnIdSecretNames[channel];
            if(!cdnIdSecretName){
              throw '::error:: can not find cdn id secret name by, channel:' + channel ;
            }
            console.log("CHANNEL=" + channel);
            console.log("S3_BUCKET_SECRET_NAME=" + s3BucketSecretName);
            console.log("CDN_ID_SECRET_NAME=" + cdnIdSecretName);
            
          EOF
        id: resolver
        env:
          VERSION_TO_DEPLOY: ${{ github.event.inputs.version }}
          ENV_TO_DEPLOY: ${{ github.event.inputs.env }}
        shell: bash
      - run: |
          echo "channel: ${{ steps.resolver.outputs.CHANNEL}}"
          echo "s3: ${{ steps.resolver.outputs.S3_BUCKET_SECRET_NAME}}"
          echo "cdn: ${{ steps.resolver.outputs.CDN_ID_SECRET_NAME}}"
          echo "need to deploy: ${{ steps.resolver.outputs.NO_NEED_TO_BUILD}}"
        name: Print resolver
        shell: bash

  frontend:
    name: Build Frontend Project
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      !contains(github.event.head_commit.message, 'skip-ci')
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version }}
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: npm clean install
        run: npm ci --legacy-peer-deps
        working-directory: ${{ env.project-directory }}
      #if input 'env' is 'prod' then run 'npm run build'
      - name: build for test
        if: "contains(github.event.inputs.env, 'test')"
        run: cd green/front/ && npm run build:test
        working-directory: ${{ env.project-directory }}
      - uses: actions/upload-artifact@v3
        with:
          name: frontend-bundle
          path: ${{ env.project-directory }}/green/front/out

  deploy:
    name: Deploy to CDN
    runs-on: ubuntu-latest
    needs: [frontend, prepare]
    if: |
      github.repository == ${{ github.env.repository }}
    steps:
      - name: Print vars
        run: |
          echo "channel: ${{ needs.prepare.outputs.CHANNEL }}"
          echo "s3: ${{ needs.prepare.outputs.S3_BUCKET_SECRET_NAME }}"
          echo "cdn: ${{ needs.prepare.outputs.CDN_ID_SECRET_NAME }}"
      - name: Download bundled frontend resources
        uses: actions/download-artifact@v3
        with:
          name: frontend-bundle
          path: ${{ env.project-directory }}/green/front/out
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_DEV }}
          aws-region: us-east-1
      - name: Copy front end resources to s3 bucket
        run: |
          aws s3 sync build s3://${{secrets[needs.prepare.outputs.S3_BUCKET_SECRET_NAME]}} --delete
      - name: Invalidate cloudfront caches
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets[needs.prepare.outputs.CDN_ID_SECRET_NAME]}} --paths "/*"